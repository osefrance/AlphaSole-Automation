void ini_led() {
  pinMode(WALL_1,OUTPUT);
  digitalWrite(WALL_1, LOW);
  pinMode(WALL_2,OUTPUT);
  digitalWrite(WALL_2, LOW);
  pinMode(WALL_3,OUTPUT);
  digitalWrite(WALL_3, LOW);
  pinMode(WALL_4,OUTPUT);
  digitalWrite(WALL_4, LOW);
  pinMode(WALL_5,OUTPUT);
  digitalWrite(WALL_5, LOW);
  pinMode(WALL_6,OUTPUT);
  digitalWrite(WALL_6, LOW);
  pinMode(WALL_7,OUTPUT);
  digitalWrite(WALL_7, LOW);
  pinMode(WALL_8,OUTPUT);
  digitalWrite(WALL_8, LOW);
  pinMode(WALL_9,OUTPUT);
  digitalWrite(WALL_9, LOW);
  pinMode(WALL_10,OUTPUT);
  digitalWrite(WALL_10, LOW);

  pinMode(RED_1,OUTPUT);
  digitalWrite(RED_1, LOW);
  pinMode(RED_2,OUTPUT);
  digitalWrite(RED_2, LOW);
  pinMode(RED_3,OUTPUT);
  digitalWrite(RED_3, LOW);
  pinMode(RED_4,OUTPUT);
  digitalWrite(RED_4, LOW);
  
  pinMode(GREEN_1,OUTPUT);
  digitalWrite(GREEN_1, LOW);
  pinMode(GREEN_2,OUTPUT);
  digitalWrite(GREEN_2, LOW);

  pinMode(SWITCH,INPUT_PULLUP);
}

/* Power_Led_Wall()
 * The goal of this function is to rise the number of LED lighted on the LEDWALL in
 * proportion of the power generated by the systeme.
*/

void Power_Led_Wall()
{
  if(power>=POWER_MAX)
    digitalWrite(WALL_10, HIGH);
  else
    digitalWrite(WALL_10, LOW);

  if(power>=(POWER_MAX *0.9))
    digitalWrite(WALL_9, HIGH);
  else
    digitalWrite(WALL_9, LOW);

  if(power>=(POWER_MAX *0.8))
    digitalWrite(WALL_8, HIGH);
  else
    digitalWrite(WALL_8, LOW);

  if(power>=(POWER_MAX *0.7))
    digitalWrite(WALL_7, HIGH);
  else
    digitalWrite(WALL_7, LOW);

  if(power>=(POWER_MAX *0.6))
    digitalWrite(WALL_6, HIGH);
  else
    digitalWrite(WALL_6, LOW);

  if(power>=(POWER_MAX *0.5))
    digitalWrite(WALL_5, HIGH);
  else
    digitalWrite(WALL_5, LOW);
    
  if(power>=(POWER_MAX *0.4))
    digitalWrite(WALL_4, HIGH);
  else
    digitalWrite(WALL_4, LOW);
    
  if(power>=(POWER_MAX *0.3))
    digitalWrite(WALL_3, HIGH);
  else
    digitalWrite(WALL_3, LOW);

  if(power>=(POWER_MAX *0.2))
    digitalWrite(WALL_2, HIGH);
  else
    digitalWrite(WALL_2, LOW);

  if(power>=(POWER_MAX *0.1))
    digitalWrite(WALL_1, HIGH);
  else
    digitalWrite(WALL_1, LOW);
}

/* refreshInterface()
 * The goal of this function is to check all the flags and change the LED states 
 * for indicates at the user the state of the box.
 * All the flags are int with values 0 or 1.
*/
void refreshInterface() {
  if(flagTemp1Max || flagTemp2Max || flagSteam)
    digitalWrite(RED_2,HIGH);
  else
    digitalWrite(RED_2,LOW);
  if(flagPressureMax)
    digitalWrite(RED_4,HIGH);
  else
    digitalWrite(RED_4,LOW);
  if(flagFlowMax)
    digitalWrite(RED_3,HIGH);
  else
    digitalWrite(RED_3,LOW);
  if(flagBug)
    digitalWrite(RED_1,HIGH);
  else
    digitalWrite(RED_1,LOW);
    
  if(lux>REACTIVE_LUM)
    digitalWrite(GREEN_2,HIGH);
  else
    digitalWrite(GREEN_2,LOW);
  if(lux < REACTIVE_LUM && lux > FORECAST_LUM)
    digitalWrite(GREEN_1,HIGH);
  else
    digitalWrite(GREEN_1,LOW);
  Power_Led_Wall();
}


void EmergencySwitch()
{
  if(digitalRead(SWITCH)==LOW)
   {
     Serial.println("Emergency mode activated");
     refreshHeliostat(); //Save the data before move the panels
     //Start the emergency mode.
     emergencyMode();
   }
}
